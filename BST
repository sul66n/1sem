#include <iostream>

struct Node {
  int value;
  Node *left = nullptr;
  Node *right = nullptr;
  Node *parent = nullptr;
};

class BST {
public:
  void InorderWalk(Node *root);
  void PreorderWalk(Node *root);
  void PostorderWalk(Node *root);
  void Insert(int val);
  void Clear(Node *root);
  void Erase(int key);
  int Height(Node *node);
  void Balance(Node *root, int &result);
  Node *GetRoot() { return root; }

private:
  Node *Search(Node *root, int key);
  Node *Min(Node *root);
  Node *Max(Node *root);
  Node *Next(Node *node);
  void Insert(Node *&root, Node *node);
  void Erase(Node *target);
  Node *root = nullptr;
};

int BST::Height(Node *node) {
  if (node == nullptr) {
    return 0;
  }
  return std::max(Height(node->left), Height(node->right)) + 1;
}

void BST::Balance(Node *root, int &result) {
  if (root != nullptr) {
    Balance(root->left, result);
    if (abs(Height(root->left) - Height(root->right)) > 1) {
      result = -1;
    }
    Balance(root->right, result);
  }
}

Node *BST::Search(Node *root, int key) {
  if (root == nullptr) {
    return nullptr;
  }
  if (root->value == key) {
    return root;
  }
  if (root->value > key) {
    return Search(root->left, key);
  }
  return Search(root->right, key);
}

void BST::Insert(Node *&root, Node *node) {
  if (root == nullptr) {
    root = node;
    return;
  }
  if (node->value < root->value) {
    if (root->left == nullptr) {
      root->left = node;
      node->parent = root;
    } else {
      Insert(root->left, node);
    }
  } else {
    if (root->right == nullptr) {
      root->right = node;
      node->parent = root;
    } else {
      Insert(root->right, node);
    }
  }
}

void BST::Insert(int val) {
  if (Search(root, val)) {
    return;
  }
  Node *new_node = new Node{val};
  Insert(root, new_node);
}

void BST::InorderWalk(Node *root) {
  if (root != nullptr) {
    InorderWalk(root->left);
    std::cout << root->value << ' ';
    InorderWalk(root->right);
  }
}
void BST::PreorderWalk(Node *root) {
  if (root != nullptr) {
    std::cout << root->value << ' ';
    PreorderWalk(root->left);
    PreorderWalk(root->right);
  }
}
void BST::PostorderWalk(Node *root) {
  if (root != nullptr) {
    PostorderWalk(root->left);
    PostorderWalk(root->right);
    std::cout << root->value << ' ';
  }
}

void BST::Clear(Node *root) {
  if (root != nullptr) {
    Clear(root->left);
    Clear(root->right);
    delete root;
  }
}

Node *BST::Min(Node *root) {
  if (root == nullptr) {
    return nullptr;
  }
  while (root->left != nullptr) {
    root = root->left;
  }
  return root;
}

Node *BST::Max(Node *root) {
  if (root == nullptr) {
    return nullptr;
  }
  while (root->right != nullptr) {
    root = root->right;
  }
  return root;
}

Node *BST::Next(Node *node) { return Min(node->right); }

void BST::Erase(Node *target) {
  if (target == nullptr) {
    return;
  }

  Node *parent = target->parent;

  if (parent == nullptr) {
    if (target->left == nullptr && target->right == nullptr) {
      root = nullptr;
      delete target;
      return;
    }

    if (target->left == nullptr || target->right == nullptr) {
      if (target->left == nullptr) {
        root = target->right;
      } else {
        root = target->left;
      }
      delete target;
      return;
    }

    Node *successer = Next(target);
    target->value = successer->value;
    if (successer->parent->left == successer) {
      successer->parent->left = successer->right;
      if (successer->right != nullptr) {
        successer->right->parent = successer->parent;
      }
    } else {
      successer->parent->right = successer->right;
      if (successer->right != nullptr) {
        successer->right->parent = successer->parent;
      }
    }
    delete successer;
    return;
  }
  
  if (target->left == nullptr && target->right == nullptr) {
    if (parent->left == target) {
      parent->left = nullptr;
    } else {
      parent->right = nullptr;
    }
    delete target;
    return;
  }
  
  if (target->left == nullptr || target->right == nullptr) {
    if (target->left == nullptr) {
      if (parent->left == target) {
        parent->left = target->right;
      } else {
        parent->right = target->right;
      }
    } else {
      if (parent->left == target) {
        parent->left = target->left;
      } else {
        parent->right = target->left;
      }
    }
    delete target;
    return;
  }
  Node *successer = Next(target);
  target->value = successer->value;
  if (successer->parent->left == successer) {
    successer->parent->left = successer->right;
    if (successer->right != nullptr) {
      successer->right->parent = successer->parent;
    }
  } else {
    successer->parent->right = successer->right;
    if (successer->right != nullptr) {
      successer->right->parent = successer->parent;
    }
  }
  delete successer;
  return;
}

void BST::Erase(int key) {
  Node *target = Search(root, key);
  Erase(target);
}

int main() {
  BST bst;
  int n = 0;
  std::cin >> n;
  for (int i = 0; i < n; i++) {
    int value = 0;
    std::cin >> value;
    bst.Insert(value);
  }
  int result = 0;
  bst.Balance(bst.GetRoot(), result);
  if (result == -1) {
    std::cout << "NO";
  } else {
    std::cout << "YES";
  }
}
